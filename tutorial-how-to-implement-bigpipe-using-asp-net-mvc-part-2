<!DOCTYPE html>



  


<html class="theme-next muse use-motion" lang="en">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta name="theme-color" content="#222">









<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />
















  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" />

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="asp net mvc,bigpipe,facebook," />










<meta name="description" content="Build Facebook&#39;s BigPipe using C#. Source code to make pagelets and achieve delayed parallel execution in an ASP.Net MVC website.">
<meta property="og:type" content="article">
<meta property="og:title" content="Tutorial: Implementing Facebook&#39;s BigPipe Using ASP.Net MVC - Part 2">
<meta property="og:url" content="https://blog.feedscoin.com/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">
<meta property="og:site_name" content="逐流小站">
<meta property="og:description" content="Build Facebook&#39;s BigPipe using C#. Source code to make pagelets and achieve delayed parallel execution in an ASP.Net MVC website.">
<meta property="og:locale" content="en_US">
<meta property="article:published_time" content="2010-09-22T11:34:36.000Z">
<meta property="article:modified_time" content="2024-01-15T07:11:20.000Z">
<meta property="article:author" content="Laird Lau">
<meta property="article:tag" content="asp net mvc">
<meta property="article:tag" content="bigpipe">
<meta property="article:tag" content="facebook">
<meta name="twitter:card" content="summary">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '',
    scheme: 'Muse',
    version: '5.1.4',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: 'Author'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://blog.feedscoin.com/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2"/>





  <title>Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 2 | 逐流小站</title>
  





<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-MW47YH6RH0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-MW47YH6RH0');
</script>





<meta name="generator" content="Hexo 7.0.0"></head>

<body itemscope itemtype="http://schema.org/WebPage" lang="en">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/"  class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">逐流小站</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <h1 class="site-subtitle" itemprop="description">想回到那个能随便跳槽的年代</h1>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            Home
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />
            
            Tags
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-th"></i> <br />
            
            Categories
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/archives/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            Archives
          </a>
        </li>
      
        
        <li class="menu-item menu-item-sitemap">
          <a href="/sitemap.xml" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-sitemap"></i> <br />
            
            Sitemap
          </a>
        </li>
      

      
    </ul>
  

  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://blog.feedscoin.com/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-2">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="">
      <meta itemprop="description" content="">
      <meta itemprop="image" content="/images/avatar.gif">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="逐流小站">
    </span>

    
      <header class="post-header">

        
        
          <h2 class="post-title" itemprop="name headline">Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 2</h2>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">Posted on</span>
              
              <time title="Post created" itemprop="dateCreated datePublished" datetime="2010-09-22T19:34:36+08:00">
                2010-09-22
              </time>
            

            

            
          </span>

          

          
            
          

          
          

          

          

          
              <div class="post-description">
                  Build Facebook's BigPipe using C#. Source code to make pagelets and achieve delayed parallel execution in an ASP.Net MVC website.
              </div>
          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4522670236044605"
     crossorigin="anonymous"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-4522670236044605"
     data-ad-slot="5167312561"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      
      

      

        <p>Parts of the tutorial</p>
<ol>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">Introduction to BigPipe</a></li>
<li>How ASP.Net MVC fits in the model. Registering and generating pagelets</li>
<li><a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">Browser implementation of BigPipe. Loading pagelets and their<br>resources effectively</a></li>
<li><a target="_blank" rel="noopener" href="https://github.com/JMPerez/BigPipe">Check out the demo Visual Studio solution</a></li>
</ol>
<p>In <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1">the previous post of this tutorial</a> I made an overview explaining how Bigpipe works and why it can improve users’ perceived speed when loading our pages.</p>
<!-- more -->
<p>Basically Bigpipe combines early flushing, parallel processing and a managed resources loading in the browser to prioritize showing content quickly over loading and executing JavaScript files.</p>
<p>In this second post I will show how ASP.Net MVC features fit in the BigPipe model. Code snippets will help to illustrate he different parts. I will upload the source code in a Visual Studio 2010 project during the next days, so you can download it and further explore this technique.</p>
<h2 id="View-structure"><a href="#View-structure" class="headerlink" title="View structure"></a>View structure</h2><p>Our view structure will be the usual when working with ASP.Net MVC:</p>
<ul>
<li><code>Site.Master</code>: Contains the skeleton of the HTML document. It will<br>also fire the execution of the pagelets.</li>
<li><code>SomePage.aspx</code>: Fills the ContentPlaceHolders of the Site.Master.<br>It will include the different pagelets.</li>
<li><code>Pagelet1.ascx</code>, <code>Pagelet2.ascx</code>… : The partial views that<br>provides content to some areas that compose the page.</li>
</ul>
<h2 id="Pagelets-as-RenderActions"><a href="#Pagelets-as-RenderActions" class="headerlink" title="Pagelets as RenderActions"></a>Pagelets as RenderActions</h2><p>Our pagelets will be included using RenderActions. Pagelets are supposed<br>to take some time to be executed, so it makes sense that these will need<br>to access data in some way. These data will be retrieved in a controller<br>to keep MVC paradigm.</p>
<h2 id="Registering-pagelets"><a href="#Registering-pagelets" class="headerlink" title="Registering pagelets"></a>Registering pagelets</h2><p>First of all, we will declare a Pagelet class that is going to be used<br>to register the Pagelets. A pagelet will contain an instance of Data,<br>that will be serialized as JSON.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Content &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; Css &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> IEnumerable&lt;<span class="built_in">string</span>&gt; Js &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Pagelet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> JavaScriptSerializer jss = <span class="keyword">new</span> JavaScriptSerializer();</span><br><span class="line"></span><br><span class="line">    Func&lt;<span class="built_in">string</span>&gt; Action &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="built_in">string</span> Container;</span><br><span class="line">    <span class="keyword">public</span> Data Data &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> Manages a pagelet</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=container&gt;</span>The id of the div container in which the output will be appended<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=action&gt;</span>The action to execute that will generate the output<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Pagelet</span>(<span class="params"><span class="built_in">string</span> container, Func&lt;<span class="built_in">string</span>&gt; action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Container = container;</span><br><span class="line">        <span class="keyword">this</span>.Action = action;</span><br><span class="line">        <span class="keyword">this</span>.Data = <span class="keyword">new</span> Data() &#123; Id = container &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Data.Content = Action();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Serialize</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;script&gt; <span class="keyword">var</span> js_pagelet =</span><br><span class="line">            + jss.Serialize(Data)</span><br><span class="line">            + ; document.getElementById(\</span><br><span class="line">            + Container</span><br><span class="line">            + \).innerHTML = js_pagelet.Content; &lt;/script&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>The Js and Css arrays of strings will contain the files of these types needed by the pagelet to be styled and work correctly (in the next post I will make heavier use of these fields when covering the Javascript script).</p>
<p>The <code>Serialize()</code> method will generate the code to make the call to inject the code into its container.</p>
<p>Next, we will define some helpers that will be used to register the pagelet and store the output of the RenderAction call.</p>
<p>We want the rendered content to be converted into a JSON object so, instead of just rendering the action (writing the output directly to the response), we will render the action storing the result in a string. For this, we will use RenderActionToString.</p>
<p>We need a way to get the result of the RenderAction as a string. Following a similar method to the one used to <a target="_blank" rel="noopener" href="http://www.klopfenstein.net/lorenz.aspx/render-partial-view-to-string-in-asp-net-mvc">render a partial view to a string</a>, we can declare extension methods to get the output of an action:</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">RendererHelper</span> &#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span>Fake IView implementation, only used to instantiate an HtmlHelper.<span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FakeView</span> : <span class="title">IView</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> IView Members</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Render</span>(<span class="params">ViewContext viewContext, System.IO.TextWriter writer</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">RenderActionToString</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper, HttpRequest request, <span class="built_in">string</span> controller, <span class="built_in">string</span> action</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Create memory writer</span></span><br><span class="line">        <span class="keyword">var</span> sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">var</span> memWriter = <span class="keyword">new</span> StringWriter(sb);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Create fake http context to render the view</span></span><br><span class="line">        <span class="keyword">var</span> fakeResponse = <span class="keyword">new</span> HttpResponse(memWriter);</span><br><span class="line">        <span class="keyword">var</span> fakeContext = <span class="keyword">new</span> HttpContext(request, fakeResponse);</span><br><span class="line">        <span class="keyword">var</span> fakeControllerContext = <span class="keyword">new</span> ControllerContext(</span><br><span class="line">            <span class="keyword">new</span> HttpContextWrapper(fakeContext),</span><br><span class="line">            helper.ViewContext.RouteData,</span><br><span class="line">            helper.ViewContext.Controller);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oldContext = HttpContext.Current;</span><br><span class="line">        HttpContext.Current = fakeContext;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Use HtmlHelper to render partial view to fake context</span></span><br><span class="line">        <span class="keyword">var</span> html = <span class="keyword">new</span> HtmlHelper(<span class="keyword">new</span> ViewContext(fakeControllerContext,</span><br><span class="line">            <span class="keyword">new</span> FakeView(), <span class="keyword">new</span> ViewDataDictionary(), <span class="keyword">new</span> TempDataDictionary(), memWriter),</span><br><span class="line">            <span class="keyword">new</span> ViewPage());</span><br><span class="line">        html.RenderAction(action, controller);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Restore context</span></span><br><span class="line">        HttpContext.Current = oldContext;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Flush memory and return output</span></span><br><span class="line">        memWriter.Flush();</span><br><span class="line">        <span class="keyword">return</span> sb.ToString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>HtmlHelper already has the <code>Action</code> method extension that gets the result of an action in a string, but it can be problematic when using multiple threads to execute the pagelets, as I explain in the <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3">third part of this tutorial</a>.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BigPipeHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterPagelet</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper, Pagelet pagelet</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> context = helper.ViewContext.HttpContext;</span><br><span class="line">        <span class="built_in">bool</span> jsEnabled = context.Request.Cookies[js] != <span class="literal">null</span> &amp;amp;&amp;amp; context.Request.Cookies[js].Value == <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!jsEnabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//JavaScript is not enabled, so we write the execution to the output and</span></span><br><span class="line">            <span class="comment">//not register the pagelet</span></span><br><span class="line">            <span class="keyword">if</span> (pagelet.Data.Css != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="built_in">string</span> css <span class="keyword">in</span> pagelet.Data.Css)</span><br><span class="line">                    helper.IncludeCss(css);</span><br><span class="line"></span><br><span class="line">            pagelet.Execute();</span><br><span class="line">            context.Response.Write(<span class="built_in">string</span>.Format(&lt;div id=\&#123;<span class="number">0</span>&#125;\&gt;&#123;<span class="number">1</span>&#125;&lt;/div&gt;, pagelet.Container, pagelet.Data.Content));</span><br><span class="line">            context.Response.Flush();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Pagelet&gt; pagelets = (List&lt;Pagelet&gt;)context.Items[Pagelets];</span><br><span class="line">        <span class="keyword">if</span> (pagelets == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            pagelets = <span class="keyword">new</span> List&lt;Pagelet&gt;();</span><br><span class="line">            context.Items[Pagelets] = pagelets;</span><br><span class="line">        &#125;</span><br><span class="line">        pagelets.Add(pagelet);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//write pagelet container</span></span><br><span class="line">        context.Response.Write(&lt;div id=\ + pagelet.Container + \&gt;&lt;/div&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>We will use <a target="_blank" rel="noopener" href="http://www.4guysfromrolla.com/articles/060904-1.aspx">HttpContext.Items</a> to store the pagelets. The aspx page will decide to render each action or register a pagelet for later execution, depending on Javascript support. When using BigPipe we will choose the later one.</p>
<p>Then, in Site.Master, just before closing the body tag, we will make a flush so the browser can process the code generated so far, and then we will start executing the pagelets.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  &lt;% Response.Flush(); %&gt;</span><br><span class="line">  &lt;% Html.ExecutePagelets(); %&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>The pagelets will be executed in a set of parallel threads. Each thread will execute the render action and will write a Javascript call to process the pagelet. After writing this response, we will flush it so the browser can start processing the code for the just generated pagelet.</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> _locker = <span class="keyword">new</span> <span class="built_in">object</span>();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExecutePagelets</span>(<span class="params"><span class="keyword">this</span> HtmlHelper helper</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> context = helper.ViewContext.HttpContext;</span><br><span class="line">    List&lt;Pagelet&gt; pagelets = (List&lt;Pagelet&gt;)context.Items[Pagelets];</span><br><span class="line">    <span class="keyword">if</span> (pagelets == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Parallel.For(<span class="number">0</span>, pagelets.Count, (i) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> pagelet = pagelets[i];</span><br><span class="line">        pagelet.Execute();</span><br><span class="line">        <span class="keyword">lock</span>(_locker) &#123;</span><br><span class="line">            context.Response.Write(pagelet.Serialize());</span><br><span class="line">            context.Response.Flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Parallel.For (C# 4.0) creates a set of threads and continues with the next instruction once they all have finished. For each pagelet, we store in the Content field the result of executing its Action() method, this is, the output of the RenderAction. Next we write to the output the Data object as a JSON string and flush it.</p>
<h3 id="Implementing-the-browser-side-of-Bigpipe"><a href="#Implementing-the-browser-side-of-Bigpipe" class="headerlink" title="Implementing the browser side of Bigpipe"></a>Implementing the browser side of Bigpipe</h3><p>I did not want to make just a proof of concept of Bigpipe, but also implement a basic system that covers this technique from the server to the browser.</p>
<p>In the next post I will focus on the script that will manage the loading of CSS and JavaScript resources for the pagelets. This script is independent of the technology and programming language used on server. I will also show some resources loading charts to see how BigPipe affects this.</p>
<p><strong>Update September 26th:</strong> I add a locker in the <code>ExecutePagelets</code> method to make response writing thread safe.</p>
<p><strong>Update September 27th:</strong> I add support for javascript disabled browser, generating content immediately when registering pagelets in <code>RegisterPagelet</code> method.</p>

      
    </div>
    
    
    

    


    

    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/asp-net-mvc/" rel="tag"># asp net mvc</a>
          
            <a href="/tags/bigpipe/" rel="tag"># bigpipe</a>
          
            <a href="/tags/facebook/" rel="tag"># facebook</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-1" rel="next" title="Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 1">
                <i class="fa fa-chevron-left"></i> Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 1
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/tutorial-how-to-implement-bigpipe-using-asp-net-mvc-part-3" rel="prev" title="Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 3">
                Tutorial: Implementing Facebook's BigPipe Using ASP.Net MVC - Part 3 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            Table of Contents
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            Overview
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <p class="site-author-name" itemprop="name"></p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives/%7C%7C%20archive">
              
                  <span class="site-state-item-count">1451</span>
                  <span class="site-state-item-name">posts</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">71</span>
                  <span class="site-state-item-name">categories</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">889</span>
                  <span class="site-state-item-name">tags</span>
                </a>
              </div>
            

          </nav>

          

          

          
          

          
          

          <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4522670236044605"
     crossorigin="anonymous"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-4522670236044605"
     data-ad-slot="5358884258"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#View-structure"><span class="nav-number">1.</span> <span class="nav-text">View structure</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Pagelets-as-RenderActions"><span class="nav-number">2.</span> <span class="nav-text">Pagelets as RenderActions</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Registering-pagelets"><span class="nav-number">3.</span> <span class="nav-text">Registering pagelets</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#Implementing-the-browser-side-of-Bigpipe"><span class="nav-number">3.1.</span> <span class="nav-text">Implementing the browser side of Bigpipe</span></a></li></ol></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright">&copy; <span itemprop="copyrightYear">2024</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Laird Lau</span>

  
</div>


  <div class="powered-by">Powered by <a class="theme-link" target="_blank" href="https://hexo.io">Hexo</a></div>



  <span class="post-meta-divider">|</span>



  <div class="theme-info">Theme &mdash; <a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next">NexT.Muse</a> v5.1.4</div>




        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  

  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  












  





  

  

  

  
  

  

  

  

</body>
</html>
