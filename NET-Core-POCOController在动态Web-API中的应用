<!DOCTYPE html>



  


<html class="theme-next muse use-motion" lang="en">
<head>
  <meta charset="UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"/>
<meta name="theme-color" content="#222">









<meta http-equiv="Cache-Control" content="no-transform" />
<meta http-equiv="Cache-Control" content="no-siteapp" />
















  
  
  <link href="/lib/fancybox/source/jquery.fancybox.css?v=2.1.5" rel="stylesheet" type="text/css" />







<link href="/lib/font-awesome/css/font-awesome.min.css?v=4.6.2" rel="stylesheet" type="text/css" />

<link href="/css/main.css?v=5.1.4" rel="stylesheet" type="text/css" />


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png?v=5.1.4">


  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png?v=5.1.4">


  <link rel="mask-icon" href="/images/logo.svg?v=5.1.4" color="#222">





  <meta name="keywords" content="Web,技巧,.NET Core,API," />










<meta name="description" content="POCOController 是 ASP.NET Core 中提供的一个新特性，按照约定大于配置的原则，在 ASP.NET Core 项目中，所有带有 Controller 后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承 Controller 类，ASP.NET Core 依然会将其识别为 Controller，并拥有和普通 Controller 一样的功能，说">
<meta property="og:type" content="article">
<meta property="og:title" content=".NET Core POCOController 在动态 Web API 中的应用">
<meta property="og:url" content="https://blog.feedscoin.com/NET-Core-POCOController%E5%9C%A8%E5%8A%A8%E6%80%81Web-API%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">
<meta property="og:site_name" content="逐流小站">
<meta property="og:description" content="POCOController 是 ASP.NET Core 中提供的一个新特性，按照约定大于配置的原则，在 ASP.NET Core 项目中，所有带有 Controller 后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承 Controller 类，ASP.NET Core 依然会将其识别为 Controller，并拥有和普通 Controller 一样的功能，说">
<meta property="og:locale" content="en_US">
<meta property="og:image" content="https://ww1.sinaimg.cn/large/4c36074fly1g5j4wxhvuaj20kw0c075r.jpg">
<meta property="og:image" content="https://ww1.sinaimg.cn/large/4c36074fly1g5k84kvuzqj21hc0s03zo.jpg">
<meta property="article:published_time" content="2019-08-01T08:44:59.000Z">
<meta property="article:modified_time" content="2024-01-15T07:50:33.124Z">
<meta property="article:author" content="Laird Lau">
<meta property="article:tag" content="Web">
<meta property="article:tag" content="技巧">
<meta property="article:tag" content=".NET Core">
<meta property="article:tag" content="API">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://ww1.sinaimg.cn/large/4c36074fly1g5j4wxhvuaj20kw0c075r.jpg">



<script type="text/javascript" id="hexo.configurations">
  var NexT = window.NexT || {};
  var CONFIG = {
    root: '',
    scheme: 'Muse',
    version: '5.1.4',
    sidebar: {"position":"left","display":"post","offset":12,"b2t":false,"scrollpercent":false,"onmobile":false},
    fancybox: true,
    tabs: true,
    motion: {"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"slideDownIn","post_body":"slideDownIn","coll_header":"slideLeftIn","sidebar":"slideUpIn"}},
    duoshuo: {
      userId: '0',
      author: 'Author'
    },
    algolia: {
      applicationID: '',
      apiKey: '',
      indexName: '',
      hits: {"per_page":10},
      labels: {"input_placeholder":"Search for Posts","hits_empty":"We didn't find any results for the search: ${query}","hits_stats":"${hits} results found in ${time} ms"}
    }
  };
</script>



  <link rel="canonical" href="https://blog.feedscoin.com/NET-Core-POCOController在动态Web-API中的应用"/>





  <title>.NET Core POCOController 在动态 Web API 中的应用 | 逐流小站</title>
  





<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-MW47YH6RH0"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-MW47YH6RH0');
</script>





<meta name="generator" content="Hexo 7.0.0"></head>

<body itemscope itemtype="http://schema.org/WebPage" lang="en">

  
  
    
  

  <div class="container sidebar-position-left page-post-detail">
    <div class="headband"></div>

    <header id="header" class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-wrapper">
  <div class="site-meta ">
    

    <div class="custom-logo-site-title">
      <a href="/"  class="brand" rel="start">
        <span class="logo-line-before"><i></i></span>
        <span class="site-title">逐流小站</span>
        <span class="logo-line-after"><i></i></span>
      </a>
    </div>
      
        <h1 class="site-subtitle" itemprop="description">想回到那个能随便跳槽的年代</h1>
      
  </div>

  <div class="site-nav-toggle">
    <button>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
      <span class="btn-bar"></span>
    </button>
  </div>
</div>

<nav class="site-nav">
  

  
    <ul id="menu" class="menu">
      
        
        <li class="menu-item menu-item-home">
          <a href="/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-home"></i> <br />
            
            Home
          </a>
        </li>
      
        
        <li class="menu-item menu-item-tags">
          <a href="/tags/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-tags"></i> <br />
            
            Tags
          </a>
        </li>
      
        
        <li class="menu-item menu-item-categories">
          <a href="/categories/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-th"></i> <br />
            
            Categories
          </a>
        </li>
      
        
        <li class="menu-item menu-item-archives">
          <a href="/archives/" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-archive"></i> <br />
            
            Archives
          </a>
        </li>
      
        
        <li class="menu-item menu-item-sitemap">
          <a href="/sitemap.xml" rel="section">
            
              <i class="menu-item-icon fa fa-fw fa-sitemap"></i> <br />
            
            Sitemap
          </a>
        </li>
      

      
        <li class="menu-item menu-item-search">
          
            <a href="javascript:;" class="popup-trigger">
          
            
              <i class="menu-item-icon fa fa-search fa-fw"></i> <br />
            
            Search
          </a>
        </li>
      
    </ul>
  

  
    <div class="site-search">
      
  
  <div class="algolia-popup popup search-popup">
    <div class="algolia-search">
      <div class="algolia-search-input-icon">
        <i class="fa fa-search"></i>
      </div>
      <div class="algolia-search-input" id="algolia-search-input"></div>
    </div>

    <div class="algolia-results">
      <div id="algolia-stats"></div>
      <div id="algolia-hits"></div>
      <div id="algolia-pagination" class="algolia-pagination"></div>
    </div>

    <span class="popup-btn-close">
      <i class="fa fa-times-circle"></i>
    </span>
  </div>




    </div>
  
</nav>



 </div>
    </header>

    <main id="main" class="main">
      <div class="main-inner">
        <div class="content-wrap">
          <div id="content" class="content">
            

  <div id="posts" class="posts-expand">
    

  

  
  
  

  <article class="post post-type-normal" itemscope itemtype="http://schema.org/Article">
  
  
  
  <div class="post-block">
    <link itemprop="mainEntityOfPage" href="https://blog.feedscoin.com/NET-Core-POCOController%E5%9C%A8%E5%8A%A8%E6%80%81Web-API%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="name" content="">
      <meta itemprop="description" content="">
      <meta itemprop="image" content="/images/avatar.gif">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="逐流小站">
    </span>

    
      <header class="post-header">

        
        
          <h2 class="post-title" itemprop="name headline">.NET Core POCOController 在动态 Web API 中的应用</h2>
        

        <div class="post-meta">
          <span class="post-time">
            
              <span class="post-meta-item-icon">
                <i class="fa fa-calendar-o"></i>
              </span>
              
                <span class="post-meta-item-text">Posted on</span>
              
              <time title="Post created" itemprop="dateCreated datePublished" datetime="2019-08-01T16:44:59+08:00">
                2019-08-01
              </time>
            

            

            
          </span>

          
            <span class="post-category" >
            
              <span class="post-meta-divider">|</span>
            
              <span class="post-meta-item-icon">
                <i class="fa fa-folder-o"></i>
              </span>
              
                <span class="post-meta-item-text">In</span>
              
              
                <span itemprop="about" itemscope itemtype="http://schema.org/Thing">
                  <a href="/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/" itemprop="url" rel="index">
                    <span itemprop="name">编程语言</span>
                  </a>
                </span>

                
                

              
            </span>
          

          
            
          

          
          

          

          

          
              <div class="post-description">
                  POCOController 是 ASP.NET Core 中提供的一个新特性，按照约定大于配置的原则，在 ASP.NET Core 项目中，所有带有 Controller 后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承 Controller 类，ASP.NET Core 依然会将其识别为 Controller，并拥有和普通 Controller 一样的功能，说到这里，你是不是有点兴奋了呢，因为我们在 ASP.NET 里花了大力气去做类似的事情，因为 ASP.NET 里一个普通的类是没有办法成为 Controller 的，即使通过 Castle 的 Dynamic Proxy 黑科技，我们依然需要去 Hack 整个 MVC 框架创建、筛选 Controller 和 Action 的过程;所以，我们希望在提供默认路由的基础上，使用者可以自由配置路由风格，所以，我们需要通过这个接口来构造路由信息，值得一提的是，我们可以在这个过程中设置 ApiExplorer 是否可见，为接口参数设置合适的绑定模型等等，所以，我们会使用 HttpGet/HttpPost 等来标记接口的调用方式，使用 Route 来标记用户自定义的路由信息，使用 FromBody/FromQuery 等来标记参数的绑定信息，有了这些配合 Swagger 简直是无往不胜，并非是开发人员不愿意写文档，而是因为文档的更新速度往往赶不上需求的变化速度，一旦文档落后于实际业务，这样的文档实际是没有意义的，我真的讨厌所有人都来找你问接口的地址、参数这些东西，如果你写完了一个 Service，写好对应的方法注释，然后你就有了一个可用的 Web API，和一个可用的在线文档，何乐而不为呢;这篇博客延续了上一篇博客中关于动态 Controller 的设想，而借助于.NET Core 框架提供的良好特性，它以一种更为简洁的方式被实现了，核心的内容有两个点，其一是 ControllerFeatureProvider，它能决定 MVC 会不会把一个普通的类当做控制器
              </div>
          

        </div>
      </header>
    

    
    
    
    <div class="post-body" itemprop="articleBody">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4522670236044605"
     crossorigin="anonymous"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-4522670236044605"
     data-ad-slot="5167312561"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>
      
      

      

        <p>Hi，大家好，我是 Payne，欢迎大家关注我的博客，我的博客地址是：<a target="_blank" rel="noopener" href="https://blog.yuanpei.me/"><a target="_blank" rel="noopener" href="https://blog.yuanpei.me/">https://blog.yuanpei.me</a></a>。在上一篇文章中，我和大家分享了 ASP.NET 中动态 Web API 的实现，这种方案的现实意义是，它可以让我们把任意一个接口转换为 Web API，所以，不单单局限在文章里提到的 WCF 迁移到 Web API，任意领域驱动开发(DDD)中的服务层，甚至是更为普遍的传统三层，都可以通过这种方式快速构建前后端分离的应用。可能大家会觉得直接把 Service 层暴露为 API，会引发一系列关于鉴权、参数设置(<code>FromQuery</code>&#x2F;<code>FromBody</code>)等等的问题，甚至更极端的想法是，这样和手写的没什么区别，通过中间件反射能达到相同的目的，就像我们每天都在写各种接口，经常有人告诉我们说，不要在 Controller 层写太重的业务逻辑，所以，我们的做法就是不断地在 Service 层里增加新接口，然后再把 Service 层通过 <code>Controller</code> 层暴露出来，这样子真的是对的吗？</p>
<p>可我个人相信，技术总是在不断向前发展的，大家觉得 RESTful 完全够用啦，结果 GraphQL 突然发现了。大家写了这么多年后端，其实一直都在绕着数据转，可如果数据库本身就支持 RESTful 风格的接口，或者是数据库本身就支持某种 ORM，我们后端会立马变得无趣起来。其实，在 ASP.NET Core 中已经提供了这种特性，这就是我们今天要说的 POCOController，所以，这也许是个正确的思路，对吧？为什么 Service 层本身不能就是 Controller 层呢？通过今天这篇文章，或许你会接受这种想法，因为 POCOController，就是弱化 Controller 本身的特殊性，一个 Controller 未必需要继承自 Controller，或者在名称中含有 <code>Controller</code> 相关的字眼，如果 Controller 同普通的类没有区别会怎么样呢？答案就是 Service 层和 Controller 层的界限越来越模糊。扪心自问，我们真的需要中间这一层封装吗？</p>
<h1 id="什么是-POCOController"><a href="#什么是-POCOController" class="headerlink" title="什么是 POCOController"></a>什么是 POCOController</h1><p>POCOController 是 ASP.NET Core 中提供的一个新特性，按照约定大于配置的原则，在 ASP.NET Core 项目中，所有带有 Controller 后缀的类，或者是使用了[Controller]标记的类，即使它没有像模板中一样继承 Controller 类，ASP.NET Core 依然会将其识别为 Controller，并拥有和普通 Controller 一样的功能，说到这里，你是不是有点兴奋了呢，因为我们在 ASP.NET 里花了大力气去做类似的事情，因为 ASP.NET 里一个普通的类是没有办法成为 Controller 的，即使通过 Castle 的 Dynamic Proxy 黑科技，我们依然需要去 Hack 整个 MVC 框架创建、筛选 Controller 和 Action 的过程。可在 ASP.NET Core 里这一切居然变成了一个新的 feature，所以，我预感到这篇文章应该不会像上一篇文章那么长，果然 9102 有 9102 的好处呢……好了，现在我们来写一个 POCOController：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MessageController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Echo</span>(<span class="params"><span class="built_in">string</span> receiver</span>)</span></span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">$&quot;Hello, <span class="subst">&#123;receiver&#125;</span>&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来，我们通过浏览器访问：<code>http://localhost:6363/Message/Echo?receiver=PayneQin</code>，我们就会发现一件非常神奇的事情，那就是，我们并没有真的在写一个 Controller，它没有继承 Controller 类，虽然它的名字里带着 Controller 的后缀，可它确实实现了一个 Controller 所具备的功能，因为它返回了我们期望的信息。</p>
<p><img src="https://ww1.sinaimg.cn/large/4c36074fly1g5j4wxhvuaj20kw0c075r.jpg" alt="欢迎来到POCOController的世界"></p>
<p>可以注意到，这个 Controller 使用起来和普通的 Controller 是没有任何区别的，这正是我们想要的结果。对于.NET Core 而言，一个普通的类想要成为 POCOController，只需要满足以下任意一个条件：第一，继承自 Microsoft.AspNetCore.Mvc.Controller 类，无论是否带有 Controller 后缀，都可以作为 POCOController。第二，不继承自 Microsoft.AspNetCore.Mvc.Controller 类，同时引用了 Microsoft.AspNetCore.Mvc 相关的程序集。在这里，博主一开始就犯了这个错误，因为博主建的是一个 Web API 类型的项目。</p>
<h1 id="ControllerFeatureProvider"><a href="#ControllerFeatureProvider" class="headerlink" title="ControllerFeatureProvider"></a>ControllerFeatureProvider</h1><p>那么，为什么 ASP.NET Core 里可以实现如此炫酷的功能呢？这里要介绍到 ControllerFeatureProvider。在.NET Core 中，微软引入了应用程序部件的概念，顾名思义，它是对应用程序资源的一种抽象，通过这些应用程序部件， .NET Core 提供了发现和加载 MVC 组件，如控制器、视图(View)、标记(TagHelper)、Razor 等等的功能。在 MVC 中，这些功能由 ApplicationPartManager 对象来进行管理，它维护着一个叫做 FeatureProviders 的列表，以上这些功能分别对应一个 Feature，所以，当我们希望引入一个新的功能的时候，只需要实现 <code>IApplicationFeatureProvider&lt;T&gt;</code> 接口即可，而这里的 <code>ControllerFeatureProvider</code> 显然是提供控制器相关的 Feature，它有一个最为关键的接口 <code>IsController(TypeInfo)</code>。</p>
<p>回到一开始的话题，微软定义了一个类成为 POCOController 的规则，实际上我们同样可以定义自己的规则，譬如 ABP 框架中限定的接口约束是实现 IAppService 这个接口，那么我们就可以把一个程序集或者多个程序集里的类型识别为控制器，这就是 POCOController 的奥秘所在。在比如我们的项目中难免会有大量 CRUD 的垃圾需求，区别仅仅是它访问不同的仓储，我们可能会想写一个泛型的控制器来处理，可惜在过去的 ASP.NET 里，实现这一切并不太容易。为什么说不大容易呢？通过我们上一篇文章里动态路由的整个过程，大家就知道有多麻烦了啊，可在.NET Core 里要实现一个泛型的控制器就非常容易了啊，因为我们只需要告诉 ControllerFeatureProvider，这是一个控制器，并且控制器的类型就是这个泛型参数 T，所以，综上所述，ControllerFeatureProvider 主要做两个事情，第一，判定一个类型能不能算作 Controller；第二，对程序集里的类型进行筛选和过滤。下面，我们顺着这个思路来实现我们自己的 ControllerFeatureProvider。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DynamicControllerFeatureProvider</span> : <span class="title">ControllerFeatureProvider</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="built_in">bool</span> <span class="title">IsController</span> (<span class="params">TypeInfo typeInfo</span>)</span> &#123;</span><br><span class="line">    	<span class="keyword">var</span> type = typeInfo.AsType ();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">typeof</span> (IDynamicController).IsAssignableFrom (type) ||</span><br><span class="line">            !typeInfo.IsPublic || typeInfo.IsAbstract || typeInfo.IsGenericType) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如你所见，我们采用了一种简单粗暴的方式，任何非 Public、非抽象、非泛型并且实现了 IDynamicController 接口的类型，都可以被认为是一个 Controller，原谅我起了这样一个直白而普通的接口名称，因为一开始做的时候，真的就是想延续动态 Web Api 这个想法而已，所以，大家明白就好了，不用太过纠结这个接口的名字，甚至你还可以通过 Attribute 来打上标记，反正都是为了辨别哪些类型可以被当做控制器。</p>
<h1 id="IApplicationModelConvention"><a href="#IApplicationModelConvention" class="headerlink" title="IApplicationModelConvention"></a>IApplicationModelConvention</h1><p>OK，现在我们已经告诉.NET Core，怎么样去把一个类型识别为 Controller。因为 MVC 中有一些所谓“约定大于配置”的东西，比如默认的路由规则是：<code>&#123;area&#125;/&#123;controller&#125;/&#123;action&#125;/&#123;id&#125;</code>，相信从 ASP.NET 时代一起走过来的各位，对这个东西应该很熟悉啦，因为最早 <code>App_Start</code> 里会有 <code>RouteConfig</code> 和 <code>WebApiConfig</code> 这两个东西。我们在做 ASP.NET 版本的动态 Web API 的实现的时候，实际上就是配置了这样一个固定的路由，所以，理论上现在即使我们不讲下面这部分内容，现在我们已经实现了动态 Controller。可如果我们希望对路由进行全局配置，我们就不得不关注这个接口。简而言之，通过这个接口，我们可以修改 MVC 里约定俗成的这套规则，譬如在路由中带个版本号前缀，或者根据命名空间去生成某种规则的路由，我们都可以考虑去实现这个接口。一般情况下，我们会通过重写 Apply()方法来达到修改路由的目的。</p>
<p>在这篇文章里，我们希望在 MVC 这套默认路由的基础上，增加对特性路由的支持。说到这里，我们又会回到一个旧话题，即基于配置的路由和基于特性的路由这两种路由。前者是 MVC 里的路由设计的基础，而后者是 Web API 里提出并在 RESTful 风格 API 的设计中发扬光大。所以，我们希望在提供默认路由的基础上，使用者可以自由配置路由风格，所以，我们需要通过这个接口来构造路由信息，值得一提的是，我们可以在这个过程中设置 ApiExplorer 是否可见，为接口参数设置合适的绑定模型等等，所以，我们会使用 HttpGet&#x2F;HttpPost 等来标记接口的调用方式，使用 Route 来标记用户自定义的路由信息，使用 FromBody&#x2F;FromQuery 等来标记参数的绑定信息，有了这些配合 Swagger 简直是无往不胜，并非是开发人员不愿意写文档，而是因为文档的更新速度往往赶不上需求的变化速度，一旦文档落后于实际业务，这样的文档实际是没有意义的，我真的讨厌所有人都来找你问接口的地址、参数这些东西，如果你写完了一个 Service，写好对应的方法注释，然后你就有了一个可用的 Web API，和一个可用的在线文档，何乐而不为呢？</p>
<p>下面，是博主实现的一个动态路由，它主要涉及到 <code>ConfigureApiExplorer()</code>、<code>ConfigureSelector()</code> 和 <code>ConfigureParameters()</code> 这三个部分的实现，我们一起来看下面的代码，ASP.NET Core 版本相比 ASP.NET 版本，少了像 <code>Castle DynamicProxy</code> 这样的黑科技，因此，它的实现会更加纯粹一点。</p>
<h2 id="ConfigureApiExplorer"><a href="#ConfigureApiExplorer" class="headerlink" title="ConfigureApiExplorer()"></a>ConfigureApiExplorer()</h2><p>首先，是对 ApiExplorer 进行配置。通过 ApiExplorer，我们可以控制 Controller 级别和 Action 级别的 Web API 的可见性。一般情况下的用法是在 Controller 或者 Action 上添加 ApiExplorerSettings 标记，而在这里，我们只需要给 ControllerModel 和 ActionModel 的 ApiExplorer 属性赋值即可。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureApiExplorer</span> (<span class="params">ControllerModel controller</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty (controller.ApiExplorer.GroupName))</span><br><span class="line">        controller.ApiExplorer.GroupName = controller.ControllerName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (controller.ApiExplorer.IsVisible == <span class="literal">null</span>)</span><br><span class="line">        controller.ApiExplorer.IsVisible = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">   controller.Actions.ToList ().ForEach (action =&gt; ConfigureApiExplorer (action));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureApiExplorer</span> (<span class="params">ActionModel action</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (action.ApiExplorer.IsVisible == <span class="literal">null</span>)</span><br><span class="line">       action.ApiExplorer.IsVisible = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ConfigureSelector"><a href="#ConfigureSelector" class="headerlink" title="ConfigureSelector()"></a>ConfigureSelector()</h2><p>接下来，是对路由进行配置。这部分的核心其实就是根据 AreaName、ControllerName、ActionName 来生成路由信息，我们会为没有配置过特性路由的 Action 生成默认的路由，这其实就是 MVC 里约定大于配置的一种体现啦。在这里会涉及到对 ControllerName 和 ActionName 的优化调整，主要体现在两个方面：其一，是对类似 XXXService、XXXController 等这样的后缀进行去除，使其构造出的 Api 路由更加短小精简；其二，是对 ActionName 里的 Get&#x2F;Save&#x2F;Update 等动词进行替换，使其构造出的 Api 路由更加符合 RESTful 风格。</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureSelector</span> (<span class="params">ControllerModel controller, DynamicControllerAttribute controllerAttribute</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (_dynamicControllerOptions.UseFriendlyControllerName) &#123;</span><br><span class="line">        <span class="keyword">var</span> suffixsToRemove = _dynamicControllerOptions.RemoveControllerSuffix;</span><br><span class="line">        <span class="keyword">if</span> (suffixsToRemove != <span class="literal">null</span> &amp;&amp; suffixsToRemove.Any ())</span><br><span class="line">            suffixsToRemove.ToList ().ForEach (suffix =&gt; controller.ControllerName = controller.ControllerName.Replace (suffix, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    controller.Selectors.ToList ().RemoveAll (selector =&gt;</span><br><span class="line">        selector.AttributeRouteModel == <span class="literal">null</span> &amp;&amp; (selector.ActionConstraints == <span class="literal">null</span> || !selector.ActionConstraints.Any ())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (controller.Selectors.Any (selector =&gt; selector.AttributeRouteModel != <span class="literal">null</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> areaName = <span class="built_in">string</span>.Empty;</span><br><span class="line">    <span class="keyword">if</span> (controllerAttribute != <span class="literal">null</span>)</span><br><span class="line">        areaName = controllerAttribute.AreaName;</span><br><span class="line"></span><br><span class="line">    controller.Actions.ToList ().ForEach (action =&gt; ConfigureSelector (areaName, controller.ControllerName, action));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureSelector</span> (<span class="params"><span class="built_in">string</span> areaName, <span class="built_in">string</span> controllerName, ActionModel action</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">    action.Selectors.ToList ().RemoveAll (selector =&gt;</span><br><span class="line">        selector.AttributeRouteModel == <span class="literal">null</span> &amp;&amp; (selector.ActionConstraints == <span class="literal">null</span> || !selector.ActionConstraints.Any ())</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!action.Selectors.Any ()) &#123;</span><br><span class="line">        action.Selectors.Add (CreateActionSelector (areaName, controllerName, action));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        action.Selectors.ToList ().ForEach (selector =&gt; &#123;</span><br><span class="line">            <span class="keyword">var</span> routePath = <span class="string">$&quot;<span class="subst">&#123;_dynamicControllerOptions.DefaultApiRoutePrefix&#125;</span>/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>&quot;</span>.Replace (<span class="string">&quot;//&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> routeModel = <span class="keyword">new</span> AttributeRouteModel (<span class="keyword">new</span> RouteAttribute (routePath));</span><br><span class="line">            <span class="keyword">if</span> (selector.AttributeRouteModel == <span class="literal">null</span> || !_dynamicControllerOptions.UseCustomRouteFirst)</span><br><span class="line">                selector.AttributeRouteModel = routeModel;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们知道，每个 API 接口都会有相对应的 HTTP 动词，譬如 GET、POST、PUT 等等，那么，我们在构造路由的时候，如何知道当前的 Action 应该使用什么 HTTP 动词呢？实际上，我们有两个来源来组织这些信息。第一个来源，是根据方法本身的名称，比如 Get&#x2F;Save&#x2F;Update 等等，我们通过对应关系将其转化为对应的 HTTP 动词。第二个来源是根据用户在接口中配置的路由信息，比如 RouteAttribute、HttpMethod 等等，将其转化为对应的 HTTP 动词。这个方法，其实我们在分享 ASP.NET 下的实现的时候，就已经用过一次啦，所谓“万变不离其宗”，大概就是如此：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SelectorModel <span class="title">CreateActionSelector</span>(<span class="params"><span class="built_in">string</span> areaName, <span class="built_in">string</span> controllerName, ActionModel action</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> selectorModel = <span class="keyword">new</span> SelectorModel();</span><br><span class="line">    <span class="keyword">var</span> actionName = action.ActionName;</span><br><span class="line">    <span class="keyword">var</span> routeAttributes = action.ActionMethod.GetCustomAttributes(<span class="keyword">typeof</span>(HttpMethodAttribute), <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (routeAttributes != <span class="literal">null</span> &amp;&amp; routeAttributes.Any())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> httpVerbs = routeAttributes.SelectMany(s =&gt; (s <span class="keyword">as</span> HttpMethodAttribute).HttpMethods).ToList().Distinct();</span><br><span class="line">        <span class="keyword">var</span> routePath = <span class="string">$&quot;<span class="subst">&#123;_dynamicControllerOptions.DefaultApiRoutePrefix&#125;</span>/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>&quot;</span>.Replace(<span class="string">&quot;//&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        selectorModel.AttributeRouteModel = <span class="keyword">new</span> AttributeRouteModel(<span class="keyword">new</span> RouteAttribute(routePath));</span><br><span class="line">        selectorModel.ActionConstraints.Add(<span class="keyword">new</span> HttpMethodActionConstraint(httpVerbs));</span><br><span class="line">        <span class="keyword">return</span> selectorModel;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> httpVerb = <span class="built_in">string</span>.Empty;</span><br><span class="line">        <span class="keyword">var</span> methodName = action.ActionMethod.Name.ToUpper();</span><br><span class="line">        <span class="keyword">if</span> (methodName.StartsWith(<span class="string">&quot;GET&quot;</span>) || methodName.StartsWith(<span class="string">&quot;QUERY&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">&quot;SAVE&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">&quot;POST&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">&quot;UPDATE&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            httpVerb = <span class="string">&quot;PUT&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (methodName.StartsWith(<span class="string">&quot;DELETE&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">           httpVerb = <span class="string">&quot;DELETE&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> routePath = <span class="string">$&quot;api/<span class="subst">&#123;areaName&#125;</span>/<span class="subst">&#123;controllerName&#125;</span>/<span class="subst">&#123;action.ActionName&#125;</span>&quot;</span>.Replace(<span class="string">&quot;//&quot;</span>, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">        selectorModel.AttributeRouteModel = <span class="keyword">new</span> AttributeRouteModel(<span class="keyword">new</span> RouteAttribute(routePath));</span><br><span class="line">        selectorModel.ActionConstraints.Add(<span class="keyword">new</span> HttpMethodActionConstraint(<span class="keyword">new</span>[] &#123; httpVerb &#125;));</span><br><span class="line">        <span class="keyword">return</span> selectorModel;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此可见，无论多么令人惊诧的黑科技，当我们一层层地拨开它的迷雾时，常常有种豁然开朗的感觉。当然，和那些令人看起来神清气爽的代码相比，博主远远达不到返璞归真的境界，因为这段代码怎么看都觉得丑陋。古美门律师告诉我们，要爱上丑陋，或许每个程序员都是从写烂代码开始的吧！</p>
<h2 id="ConfigureParameters"><a href="#ConfigureParameters" class="headerlink" title="ConfigureParameters()"></a>ConfigureParameters()</h2><p>接下来参数绑定相对简单，因为简单类型 MVC 自己就能完成绑定，所以，我们只需要关注复杂类型的绑定即可，最常见的一种绑定方式是 FromBody：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConfigureActionParameters</span>(<span class="params">ActionModel action</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> parameter <span class="keyword">in</span> action.Parameters)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (parameter.BindingInfo != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> type = parameter.ParameterInfo.ParameterType;</span><br><span class="line">        <span class="keyword">if</span> (type.IsPrimitive || type.IsEnum ||</span><br><span class="line">            (type.IsGenericType &amp;&amp; type.GetGenericTypeDefinition() == <span class="keyword">typeof</span>(Nullable&lt;&gt;)))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (IsFromBodyEnable(action, parameter))</span><br><span class="line">            &#123;</span><br><span class="line">                parameter.BindingInfo = BindingInfo.GetBindingInfo(<span class="keyword">new</span>[] &#123; <span class="keyword">new</span> FromBodyAttribute() &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过以上三个关键步骤，我们就能实现本文一开始的效果，感觉无形中我们又复习了一篇 MVC 匹配路由的原理呢！</p>
<h1 id="集成-Swagger-和-WebApiClient"><a href="#集成-Swagger-和-WebApiClient" class="headerlink" title="集成 Swagger 和 WebApiClient"></a>集成 Swagger 和 WebApiClient</h1><p>今天这篇文章，本质上依然是 ABP 框架中 Dynamic WebAPI 这一特性的延伸，无非是因为.NET Core 中提供了更为友好的机制，可以让这一切实现起来更简单而已。还记得博主研究这个特性的“初心”是什么吗？因为我们在升级.NET Core 的过程中打算抛弃 WCF，我们需要一种方法，可以让现有的一个普通的 Service 变成一个 Controller。固然，我们可以一个一个的去重新封装，可这真的是比较好的实践方式吗？从内部 RPC 逐渐转变为 Web API 调用，这种转变就像从 Dubbo 换成了 Spring Cloud，可是 Spring Cloud 有注册中心啊，现在我们什么都没有，从 RPC 转变为 Web API，会面临诸如接口授权、地址配置、不同上下文等等的问题。你经常需要告诉别人某个接口的地址是什么，不出意外地话，你至少会有三套环境的地址，别人还会问你各个参数的含义，甚至更懒的会要求你提供示例报文。所以，我觉得做微服务，尤其是全部采用 Web API 进行通信的微服务，提供实时更新、在线查看的文档真的非常重要，每次看到同事在 Git 里提交 Word 或者 Excel，我就感到非常纠结，一来这种东西没法正常 Merge，压缩包合并个鬼啊，二来我必须下载下来看，君不见，我下载目录里一堆重复文件，所以，我更推荐努力维护好一家公司的 API 资产，在我们用 JWT 保护这些资产以前，至少要先了解它们吧！</p>
<p>对于 API 文档，我个人推荐专门用一个站点来承载所有的 Web API，比如我们最常用的 Swagger，它在融合 OAuth2 以后可以更完美地去调试接口，了解每个接口的参数和返回值。尤其是在这篇博客的背景下，因为我们只需要把这些 POCOController 对应的注释文件(.XML)和程序集(.DLL)放到一起，同时把这些注释文件全部 Include 进来，Swagger 就可以把它们展示出来。这里用到一个非常重要的特性就是 IApiExploer 接口，你可以把它理解为，它是一切文档展示的核心，每个接口及其参数、返回值的描述信息都是由它提供的。在没有 Swagger 之前，微软提供了一个叫做 Web API HelpPage 的组件，它和 Swagger 的原理无出其右。这里剧透下，稍后我会专门写一篇博客来扩展 Swagger，目的是确保它可以为 ASP.NET MVC 提供文档支持。这里，我们使用 Swagger 来生成在线 API 文档，其核心配置如下：</p>
<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">services.AddMvcCore ().AddApiExplorer ();</span><br><span class="line">services.AddSwaggerGen (swagger =&gt; &#123;</span><br><span class="line">    swagger.SwaggerDoc (<span class="string">&quot;v1&quot;</span>, <span class="keyword">new</span> Swashbuckle.AspNetCore.Swagger.Info () &#123;</span><br><span class="line">        Title = <span class="string">&quot;DynamicController&quot;</span>,</span><br><span class="line">        Version = <span class="string">&quot;1.0&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    swagger.DocInclusionPredicate ((docName, description) =&gt; <span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">var</span> xmlFile = <span class="string">$&quot;<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlPath = Path.Combine (AppContext.BaseDirectory, xmlFile);</span><br><span class="line">    swagger.IncludeXmlComments (xmlPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以注意到，这篇文章里实现的动态 Controller 和默认的 ValuesController 都被展示了出来，两个字，完美，我们想要的就是这个效果。</p>
<p><img src="https://ww1.sinaimg.cn/large/4c36074fly1g5k84kvuzqj21hc0s03zo.jpg" alt="通过Swagger生成的在线Api文档"></p>
<p>说完了 API 文档的事情，我们再来说说调用 Web API 的问题。按理说，这应该没啥大问题，因为虽然我们会为 HttpWebRequest、WebClient、HttpClient 和 RestSharp 等等不同的 API 而感到纠结，可这丝毫不会影响我们调用 Web API。那么，问题来了，当你面对数不胜数的 API 接口的时候，你打算如何考虑这些问题？我的 API 地址应该配置在哪里？是存到 Web.Config 里还是存到数据库里？我调用 API 的时候，Token 应该从哪里获取？是每次都获取还是获取了缓存起来？如果 Token 过期了我又该怎么办？这几乎是所有全部采用 Web API 进行微服务设计时都会遇到的问题。</p>
<p>此时，我们需要一种更优雅的方式，即 <code>Retrofit</code>，它能让我们像调用一个普通方法一样调用一个 Web API，这样，我们在调用方式上其实不会有太大的改变，因为 Web API 本质上是一种特殊的 RPC。在.NET 的世界里，我们有 WebApiClient 和 Refit 这样的轮子，我之前还专门为大家介绍过 <code>WebApiClient</code>。这里就不再展示它的具体细节了，所谓点到为止，希望大家可以自己去发现这种美，对博主而言，如果在定义 Service 的时候，就考虑到这一点，或许我们可以实现更理想的效果，即，服务端和客户端是一套代码，我们写完一个接口以后，它就是 Web API，而通过动态代理，它本身又会是客户端，此中乐趣，则不足为外人道也！</p>
<h1 id="本文小结"><a href="#本文小结" class="headerlink" title="本文小结"></a>本文小结</h1><p>又是漫长的一个夏天，下雨并不能让这座城市温柔起来。这篇博客延续了上一篇博客中关于动态 Controller 的设想，而借助于.NET Core 框架提供的良好特性，它以一种更为简洁的方式被实现了，核心的内容有两个点，其一是 ControllerFeatureProvider，它能决定 MVC 会不会把一个普通的类当做控制器。其二是 IApplicationModelConvention 接口，它能对全局的路由规则进行修改，以满足我们特殊的定制化需要。再此基础上，继续引入 Swagger 和 WebApiClient 两个轮子，来解决微服务构建中的 API 文档和 API 调用问题。写博客真的是一件辛苦的事情诶，好啦，今天这篇博客就先写到这里，我们下一篇博客再见，晚安！本文中涉及到的代码可以通过：<a target="_blank" rel="noopener" href="https://github.com/qinyuanpei/DynamicWCFProxy/tree/master/DynamicWebApi.Core">https://github.com/qinyuanpei/DynamicWCFProxy/tree/master/DynamicWebApi.Core</a> 来做进一步的了解，以上！</p>

      
    </div>
    
    
    

    


    

    

    <footer class="post-footer">
      
        <div class="post-tags">
          
            <a href="/tags/Web/" rel="tag"># Web</a>
          
            <a href="/tags/%E6%8A%80%E5%B7%A7/" rel="tag"># 技巧</a>
          
            <a href="/tags/NET-Core/" rel="tag"># .NET Core</a>
          
            <a href="/tags/API/" rel="tag"># API</a>
          
        </div>
      

      
      
      

      
        <div class="post-nav">
          <div class="post-nav-next post-nav-item">
            
              <a href="/post/6959bf0.html" rel="next" title="PhpStorm 使用 PHPCS 检查代码规范及自动修正和Git提交检查">
                <i class="fa fa-chevron-left"></i> PhpStorm 使用 PHPCS 检查代码规范及自动修正和Git提交检查
              </a>
            
          </div>

          <span class="post-nav-divider"></span>

          <div class="post-nav-prev post-nav-item">
            
              <a href="/2019-08-04-American-trap" rel="prev" title="美国怎么对付华为 - 读《美国陷阱》">
                美国怎么对付华为 - 读《美国陷阱》 <i class="fa fa-chevron-right"></i>
              </a>
            
          </div>
        </div>
      

      
      
    </footer>
  </div>
  
  
  
  </article>



    <div class="post-spread">
      
    </div>
  </div>


          </div>
          


          

  



        </div>
        
          
  
  <div class="sidebar-toggle">
    <div class="sidebar-toggle-line-wrap">
      <span class="sidebar-toggle-line sidebar-toggle-line-first"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-middle"></span>
      <span class="sidebar-toggle-line sidebar-toggle-line-last"></span>
    </div>
  </div>

  <aside id="sidebar" class="sidebar">
    
    <div class="sidebar-inner">

      

      
        <ul class="sidebar-nav motion-element">
          <li class="sidebar-nav-toc sidebar-nav-active" data-target="post-toc-wrap">
            Table of Contents
          </li>
          <li class="sidebar-nav-overview" data-target="site-overview-wrap">
            Overview
          </li>
        </ul>
      

      <section class="site-overview-wrap sidebar-panel">
        <div class="site-overview">
          <div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person">
            
              <p class="site-author-name" itemprop="name"></p>
              <p class="site-description motion-element" itemprop="description"></p>
          </div>

          <nav class="site-state motion-element">

            
              <div class="site-state-item site-state-posts">
              
                <a href="/archives/%7C%7C%20archive">
              
                  <span class="site-state-item-count">1451</span>
                  <span class="site-state-item-name">posts</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-categories">
                <a href="/categories/index.html">
                  <span class="site-state-item-count">71</span>
                  <span class="site-state-item-name">categories</span>
                </a>
              </div>
            

            
              
              
              <div class="site-state-item site-state-tags">
                <a href="/tags/index.html">
                  <span class="site-state-item-count">914</span>
                  <span class="site-state-item-name">tags</span>
                </a>
              </div>
            

          </nav>

          

          

          
          

          
          

          <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4522670236044605"
     crossorigin="anonymous"></script>
<ins class="adsbygoogle"
     style="display:block; text-align:center;"
     data-ad-layout="in-article"
     data-ad-format="fluid"
     data-ad-client="ca-pub-4522670236044605"
     data-ad-slot="5358884258"></ins>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({});
</script>

        </div>
      </section>

      
      <!--noindex-->
        <section class="post-toc-wrap motion-element sidebar-panel sidebar-panel-active">
          <div class="post-toc">

            
              
            

            
              <div class="post-toc-content"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%E4%BB%80%E4%B9%88%E6%98%AF-POCOController"><span class="nav-number">1.</span> <span class="nav-text">什么是 POCOController</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#ControllerFeatureProvider"><span class="nav-number">2.</span> <span class="nav-text">ControllerFeatureProvider</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#IApplicationModelConvention"><span class="nav-number">3.</span> <span class="nav-text">IApplicationModelConvention</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#ConfigureApiExplorer"><span class="nav-number">3.1.</span> <span class="nav-text">ConfigureApiExplorer()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ConfigureSelector"><span class="nav-number">3.2.</span> <span class="nav-text">ConfigureSelector()</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#ConfigureParameters"><span class="nav-number">3.3.</span> <span class="nav-text">ConfigureParameters()</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E9%9B%86%E6%88%90-Swagger-%E5%92%8C-WebApiClient"><span class="nav-number">4.</span> <span class="nav-text">集成 Swagger 和 WebApiClient</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E6%9C%AC%E6%96%87%E5%B0%8F%E7%BB%93"><span class="nav-number">5.</span> <span class="nav-text">本文小结</span></a></li></ol></div>
            

          </div>
        </section>
      <!--/noindex-->
      

      

    </div>
  </aside>


        
      </div>
    </main>

    <footer id="footer" class="footer">
      <div class="footer-inner">
        <div class="copyright">&copy; <span itemprop="copyrightYear">2024</span>
  <span class="with-love">
    <i class="fa fa-user"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">Laird Lau</span>

  
</div>


  <div class="powered-by">Powered by <a class="theme-link" target="_blank" href="https://hexo.io">Hexo</a></div>



  <span class="post-meta-divider">|</span>



  <div class="theme-info">Theme &mdash; <a class="theme-link" target="_blank" href="https://github.com/iissnan/hexo-theme-next">NexT.Muse</a> v5.1.4</div>




        







        
      </div>
    </footer>

    
      <div class="back-to-top">
        <i class="fa fa-arrow-up"></i>
        
      </div>
    

    

  </div>

  

<script type="text/javascript">
  if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {
    window.Promise = null;
  }
</script>









  












  
  
    <script type="text/javascript" src="/lib/jquery/index.js?v=2.1.3"></script>
  

  
  
    <script type="text/javascript" src="/lib/fastclick/lib/fastclick.min.js?v=1.0.6"></script>
  

  
  
    <script type="text/javascript" src="/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/velocity/velocity.ui.min.js?v=1.2.1"></script>
  

  
  
    <script type="text/javascript" src="/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>
  


  


  <script type="text/javascript" src="/js/src/utils.js?v=5.1.4"></script>

  <script type="text/javascript" src="/js/src/motion.js?v=5.1.4"></script>



  
  

  
  <script type="text/javascript" src="/js/src/scrollspy.js?v=5.1.4"></script>
<script type="text/javascript" src="/js/src/post-details.js?v=5.1.4"></script>



  


  <script type="text/javascript" src="/js/src/bootstrap.js?v=5.1.4"></script>



  


  




	





  





  












  

  <script type="text/javascript">
    // Popup Window;
    var isfetched = false;
    var isXml = true;
    // Search DB path;
    var search_path = "search.xml";
    if (search_path.length === 0) {
      search_path = "search.xml";
    } else if (/json$/i.test(search_path)) {
      isXml = false;
    }
    var path = "/" + search_path;
    // monitor main search box;

    var onPopupClose = function (e) {
      $('.popup').hide();
      $('#local-search-input').val('');
      $('.search-result-list').remove();
      $('#no-result').remove();
      $(".local-search-pop-overlay").remove();
      $('body').css('overflow', '');
    }

    function proceedsearch() {
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay"></div>')
        .css('overflow', 'hidden');
      $('.search-popup-overlay').click(onPopupClose);
      $('.popup').toggle();
      var $localSearchInput = $('#local-search-input');
      $localSearchInput.attr("autocapitalize", "none");
      $localSearchInput.attr("autocorrect", "off");
      $localSearchInput.focus();
    }

    // search function;
    var searchFunc = function(path, search_id, content_id) {
      'use strict';

      // start loading animation
      $("body")
        .append('<div class="search-popup-overlay local-search-pop-overlay">' +
          '<div id="search-loading-icon">' +
          '<i class="fa fa-spinner fa-pulse fa-5x fa-fw"></i>' +
          '</div>' +
          '</div>')
        .css('overflow', 'hidden');
      $("#search-loading-icon").css('margin', '20% auto 0 auto').css('text-align', 'center');

      $.ajax({
        url: path,
        dataType: isXml ? "xml" : "json",
        async: true,
        success: function(res) {
          // get the contents from search data
          isfetched = true;
          $('.popup').detach().appendTo('.header-inner');
          var datas = isXml ? $("entry", res).map(function() {
            return {
              title: $("title", this).text(),
              content: $("content",this).text(),
              url: $("url" , this).text()
            };
          }).get() : res;
          var input = document.getElementById(search_id);
          var resultContent = document.getElementById(content_id);
          var inputEventFunction = function() {
            var searchText = input.value.trim().toLowerCase();
            var keywords = searchText.split(/[\s\-]+/);
            if (keywords.length > 1) {
              keywords.push(searchText);
            }
            var resultItems = [];
            if (searchText.length > 0) {
              // perform local searching
              datas.forEach(function(data) {
                var isMatch = false;
                var hitCount = 0;
                var searchTextCount = 0;
                var title = data.title.trim();
                var titleInLowerCase = title.toLowerCase();
                var content = data.content.trim().replace(/<[^>]+>/g,"");
                var contentInLowerCase = content.toLowerCase();
                var articleUrl = decodeURIComponent(data.url);
                var indexOfTitle = [];
                var indexOfContent = [];
                // only match articles with not empty titles
                if(title != '') {
                  keywords.forEach(function(keyword) {
                    function getIndexByWord(word, text, caseSensitive) {
                      var wordLen = word.length;
                      if (wordLen === 0) {
                        return [];
                      }
                      var startPosition = 0, position = [], index = [];
                      if (!caseSensitive) {
                        text = text.toLowerCase();
                        word = word.toLowerCase();
                      }
                      while ((position = text.indexOf(word, startPosition)) > -1) {
                        index.push({position: position, word: word});
                        startPosition = position + wordLen;
                      }
                      return index;
                    }

                    indexOfTitle = indexOfTitle.concat(getIndexByWord(keyword, titleInLowerCase, false));
                    indexOfContent = indexOfContent.concat(getIndexByWord(keyword, contentInLowerCase, false));
                  });
                  if (indexOfTitle.length > 0 || indexOfContent.length > 0) {
                    isMatch = true;
                    hitCount = indexOfTitle.length + indexOfContent.length;
                  }
                }

                // show search results

                if (isMatch) {
                  // sort index by position of keyword

                  [indexOfTitle, indexOfContent].forEach(function (index) {
                    index.sort(function (itemLeft, itemRight) {
                      if (itemRight.position !== itemLeft.position) {
                        return itemRight.position - itemLeft.position;
                      } else {
                        return itemLeft.word.length - itemRight.word.length;
                      }
                    });
                  });

                  // merge hits into slices

                  function mergeIntoSlice(text, start, end, index) {
                    var item = index[index.length - 1];
                    var position = item.position;
                    var word = item.word;
                    var hits = [];
                    var searchTextCountInSlice = 0;
                    while (position + word.length <= end && index.length != 0) {
                      if (word === searchText) {
                        searchTextCountInSlice++;
                      }
                      hits.push({position: position, length: word.length});
                      var wordEnd = position + word.length;

                      // move to next position of hit

                      index.pop();
                      while (index.length != 0) {
                        item = index[index.length - 1];
                        position = item.position;
                        word = item.word;
                        if (wordEnd > position) {
                          index.pop();
                        } else {
                          break;
                        }
                      }
                    }
                    searchTextCount += searchTextCountInSlice;
                    return {
                      hits: hits,
                      start: start,
                      end: end,
                      searchTextCount: searchTextCountInSlice
                    };
                  }

                  var slicesOfTitle = [];
                  if (indexOfTitle.length != 0) {
                    slicesOfTitle.push(mergeIntoSlice(title, 0, title.length, indexOfTitle));
                  }

                  var slicesOfContent = [];
                  while (indexOfContent.length != 0) {
                    var item = indexOfContent[indexOfContent.length - 1];
                    var position = item.position;
                    var word = item.word;
                    // cut out 100 characters
                    var start = position - 20;
                    var end = position + 80;
                    if(start < 0){
                      start = 0;
                    }
                    if (end < position + word.length) {
                      end = position + word.length;
                    }
                    if(end > content.length){
                      end = content.length;
                    }
                    slicesOfContent.push(mergeIntoSlice(content, start, end, indexOfContent));
                  }

                  // sort slices in content by search text's count and hits' count

                  slicesOfContent.sort(function (sliceLeft, sliceRight) {
                    if (sliceLeft.searchTextCount !== sliceRight.searchTextCount) {
                      return sliceRight.searchTextCount - sliceLeft.searchTextCount;
                    } else if (sliceLeft.hits.length !== sliceRight.hits.length) {
                      return sliceRight.hits.length - sliceLeft.hits.length;
                    } else {
                      return sliceLeft.start - sliceRight.start;
                    }
                  });

                  // select top N slices in content

                  var upperBound = parseInt('1');
                  if (upperBound >= 0) {
                    slicesOfContent = slicesOfContent.slice(0, upperBound);
                  }

                  // highlight title and content

                  function highlightKeyword(text, slice) {
                    var result = '';
                    var prevEnd = slice.start;
                    slice.hits.forEach(function (hit) {
                      result += text.substring(prevEnd, hit.position);
                      var end = hit.position + hit.length;
                      result += '<b class="search-keyword">' + text.substring(hit.position, end) + '</b>';
                      prevEnd = end;
                    });
                    result += text.substring(prevEnd, slice.end);
                    return result;
                  }

                  var resultItem = '';

                  if (slicesOfTitle.length != 0) {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + highlightKeyword(title, slicesOfTitle[0]) + "</a>";
                  } else {
                    resultItem += "<li><a href='" + articleUrl + "' class='search-result-title'>" + title + "</a>";
                  }

                  slicesOfContent.forEach(function (slice) {
                    resultItem += "<a href='" + articleUrl + "'>" +
                      "<p class=\"search-result\">" + highlightKeyword(content, slice) +
                      "...</p>" + "</a>";
                  });

                  resultItem += "</li>";
                  resultItems.push({
                    item: resultItem,
                    searchTextCount: searchTextCount,
                    hitCount: hitCount,
                    id: resultItems.length
                  });
                }
              })
            };
            if (keywords.length === 1 && keywords[0] === "") {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-search fa-5x" /></div>'
            } else if (resultItems.length === 0) {
              resultContent.innerHTML = '<div id="no-result"><i class="fa fa-frown-o fa-5x" /></div>'
            } else {
              resultItems.sort(function (resultLeft, resultRight) {
                if (resultLeft.searchTextCount !== resultRight.searchTextCount) {
                  return resultRight.searchTextCount - resultLeft.searchTextCount;
                } else if (resultLeft.hitCount !== resultRight.hitCount) {
                  return resultRight.hitCount - resultLeft.hitCount;
                } else {
                  return resultRight.id - resultLeft.id;
                }
              });
              var searchResultList = '<ul class=\"search-result-list\">';
              resultItems.forEach(function (result) {
                searchResultList += result.item;
              })
              searchResultList += "</ul>";
              resultContent.innerHTML = searchResultList;
            }
          }

          if ('auto' === 'auto') {
            input.addEventListener('input', inputEventFunction);
          } else {
            $('.search-icon').click(inputEventFunction);
            input.addEventListener('keypress', function (event) {
              if (event.keyCode === 13) {
                inputEventFunction();
              }
            });
          }

          // remove loading animation
          $(".local-search-pop-overlay").remove();
          $('body').css('overflow', '');

          proceedsearch();
        }
      });
    }

    // handle and trigger popup window;
    $('.popup-trigger').click(function(e) {
      e.stopPropagation();
      if (isfetched === false) {
        searchFunc(path, 'local-search-input', 'local-search-result');
      } else {
        proceedsearch();
      };
    });

    $('.popup-btn-close').click(onPopupClose);
    $('.popup').click(function(e){
      e.stopPropagation();
    });
    $(document).on('keyup', function (event) {
      var shouldDismissSearchPopup = event.which === 27 &&
        $('.search-popup').is(':visible');
      if (shouldDismissSearchPopup) {
        onPopupClose();
      }
    });
  </script>




  
  
  
  <link rel="stylesheet" href="/lib/algolia-instant-search/instantsearch.min.css">

  
  
  <script src="/lib/algolia-instant-search/instantsearch.min.js"></script>
  

  <script src="/js/src/algolia-search.js?v=5.1.4"></script>



  

  

  

  
  

  

  

  

</body>
</html>
